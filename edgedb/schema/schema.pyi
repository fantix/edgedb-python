from typing import Any
import edgedb.schema
import edgedb.schema.std

class Alias(AnnotationSubject):
    expr: str = ...

class Annotation(InheritingObject):
    inheritable: bool = ...

class AnnotationSubject(Object): ...

class Array(CollectionType): ...

class CallableObject(AnnotationSubject):
    return_typemod: TypeModifier = ...

class Cardinality(edgedb.schema.std.anyenum): ...

class Cast(AnnotationSubject, VolatilitySubject):
    allow_assignment: bool = ...
    allow_implicit: bool = ...

class CollectionType(Type): ...

class ConsistencySubject(InheritingObject): ...

class Constraint(InheritingObject, CallableObject):
    delegated: bool = ...
    errmessage: str = ...
    expr: str = ...
    finalexpr: str = ...
    subjectexpr: str = ...

class Delta(Object): ...

class Extension(AnnotationSubject): ...

class Function(CallableObject, VolatilitySubject): ...

class Index(AnnotationSubject):
    expr: str = ...

class InheritingObject(SubclassableObject): ...

class Link(Source, Pointer):
    on_target_delete: TargetDeleteAction = ...

class Migration(AnnotationSubject):
    message: str = ...
    script: str = ...

class Module(AnnotationSubject): ...

class Object(edgedb.schema.BaseObject):
    __dataclass_fields__: Any = ...
    __dataclass_params__: Any = ...
    builtin: bool = ...
    internal: bool = ...
    name: str = ...

class ObjectType(Type, ConsistencySubject, Source):
    compound_type: bool = ...
    is_compound_type: bool = ...

class Operator(CallableObject, VolatilitySubject):
    abstract: bool = ...
    is_abstract: bool = ...
    operator_kind: OperatorKind = ...

class OperatorKind(edgedb.schema.std.anyenum): ...

class Parameter(Object):
    default: str = ...
    kind: ParameterKind = ...
    num: int = ...
    typemod: TypeModifier = ...

class ParameterKind(edgedb.schema.std.anyenum): ...

class Pointer(AnnotationSubject, ConsistencySubject):
    cardinality: Cardinality = ...
    default: str = ...
    expr: str = ...
    readonly: bool = ...
    required: bool = ...

class Property(Pointer): ...

class PseudoType(Type, InheritingObject): ...

class ScalarType(Type, ConsistencySubject):
    default: str = ...

class Source(Object): ...

class SubclassableObject(Object):
    abstract: bool = ...
    final: bool = ...
    is_abstract: bool = ...
    is_final: bool = ...

class TargetDeleteAction(edgedb.schema.std.anyenum): ...

class Tuple(CollectionType): ...

class TupleElement(edgedb.schema.Object):
    __dataclass_fields__: Any = ...
    __dataclass_params__: Any = ...
    name: str = ...

class Type(SubclassableObject, AnnotationSubject):
    expr: str = ...
    from_alias: bool = ...
    is_from_alias: bool = ...

class TypeModifier(edgedb.schema.std.anyenum): ...

class Volatility(edgedb.schema.std.anyenum): ...

class VolatilitySubject(Object):
    volatility: Volatility = ...
